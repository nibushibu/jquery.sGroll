(function($) {
  return $.fn.sgroll = function(options) {
    var $el, arr, arr2, checkScroll, defaults, setOffset, setting, wh;
    defaults = {
      "class": "is-sgrolled"
    };
    setting = $.extend(defaults, options);
    $el = $(this);
    arr = [];
    arr2 = [];
    wh = 0;
    setOffset = function() {
      var $el1, i, j, p, ref, results;
      wh = window.innerHeight || document.documentElement.clientHeight || 0;
      results = [];
      for (i = j = 0, ref = $el.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        $el1 = $el.eq(i);
        arr.push($el1.offset().top);
        if (($el1.data("sgroll") == null) || $el1.data("sgroll") === "") {
          p = 0;
        } else {
          p = $el1.data("sgroll");
        }
        results.push(arr2.push(p));
      }
      return results;
    };
    checkScroll = function() {
      var $el1, i, j, ref, results, s;
      s = $(window).scrollTop();
      results = [];
      for (i = j = 0, ref = arr.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        $el1 = $el.eq(i);
        if (s > arr[i] - wh + (wh * arr2[i] / 100)) {
          if (!$el1.hasClass(setting["class"])) {
            results.push($el1.addClass(setting["class"]));
          } else {
            results.push(void 0);
          }
        } else {
          if ($el1.hasClass(setting["class"])) {
            results.push($el1.removeClass(setting["class"]));
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    };
    $(window).scroll(function() {
      return checkScroll();
    });
    $(window).resize(function() {
      setOffset();
      return checkScroll();
    });
    setOffset();
    checkScroll();
    return this;
  };
})(jQuery);

//# sourceMappingURL=data:application/json;base64,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QSxDQUFBLENBM0NBLENBQUE7QUFBQSxJQTRDQSxXQUFBLENBQUEsQ0E1Q0EsQ0FBQTtXQStDQSxLQWpEWTtFQUFBLEVBRmY7QUFBQSxDQUFELENBQUEsQ0FxREUsTUFyREYsQ0FBQSxDQUFBIiwiZmlsZSI6ImpxdWVyeS5zZ3JvbGwuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIoKCQpIC0+XG5cbiAgJC5mbi5zZ3JvbGwgPSAob3B0aW9ucykgLT5cbiAgICBcbiAgICBkZWZhdWx0cyA9XG4gICAgICBjbGFzczogXCJpcy1zZ3JvbGxlZFwiXG5cbiAgICBzZXR0aW5nID0gJC5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpXG5cbiAgICAkZWwgPSAkIEBcbiAgICBhcnIgPSBbXVxuICAgIGFycjIgPSBbXVxuICAgIHdoID0gMFxuICAgIFxuICAgIHNldE9mZnNldCA9IC0+XG4gICAgICBcbiAgICAgIHdoID0gd2luZG93LmlubmVySGVpZ2h0IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgb3IgMFxuICAgICAgXG4gICAgICBmb3IgaSBpbiBbMC4uLiRlbC5sZW5ndGhdXG4gICAgICAgICRlbDEgPSAkZWwuZXEoaSlcbiAgICAgICAgYXJyLnB1c2ggJGVsMS5vZmZzZXQoKS50b3BcbiAgICAgICAgaWYgISRlbDEuZGF0YShcInNncm9sbFwiKT8gb3IgJGVsMS5kYXRhKFwic2dyb2xsXCIpIGlzIFwiXCJcbiAgICAgICAgICBwID0gMFxuICAgICAgICBlbHNlXG4gICAgICAgICAgcCA9ICRlbDEuZGF0YShcInNncm9sbFwiKVxuICAgICAgICBhcnIyLnB1c2ggcFxuXG4gICAgY2hlY2tTY3JvbGwgPSAtPlxuICAgICAgXG4gICAgICBzID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpXG4gICAgICBcbiAgICAgIGZvciBpIGluIFswLi4uYXJyLmxlbmd0aF1cbiAgICAgICAgJGVsMSA9ICRlbC5lcShpKVxuICAgICAgICBpZiBzID4gYXJyW2ldIC0gd2ggKyAoIHdoICogYXJyMltpXSAvIDEwMClcbiAgICAgICAgICB1bmxlc3MgJGVsMS5oYXNDbGFzcyBzZXR0aW5nLmNsYXNzXG4gICAgICAgICAgICAkZWwxLmFkZENsYXNzIHNldHRpbmcuY2xhc3NcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGlmICRlbDEuaGFzQ2xhc3Mgc2V0dGluZy5jbGFzc1xuICAgICAgICAgICAgJGVsMS5yZW1vdmVDbGFzcyBzZXR0aW5nLmNsYXNzXG4gICAgXG4gICAgJCh3aW5kb3cpLnNjcm9sbCAtPlxuICAgICAgY2hlY2tTY3JvbGwoKVxuICAgIFxuICAgICQod2luZG93KS5yZXNpemUgLT5cbiAgICAgIHNldE9mZnNldCgpXG4gICAgICBjaGVja1Njcm9sbCgpXG5cbiAgICBzZXRPZmZzZXQoKVxuICAgIGNoZWNrU2Nyb2xsKClcblxuICAgICMg44Oh44K944OD44OJ44OB44Kn44O844Oz5a++5b+cXG4gICAgdGhpc1xuICAgIFxuKSBqUXVlcnlcbiJdfQ==